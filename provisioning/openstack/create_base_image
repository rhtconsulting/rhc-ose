#!/bin/bash -

#
# Create a base image for OpenShift Enterprise 3
#

#
# Prerequisite:
#  - have a valid RHN username/password + a pool id available
#

#
# Instructions to run:
# git clone https://github.com/redhat-consulting/ose-utils -b openshift-enterprise-3
# (create a new instance based on rhel 7)
# tar cf - ./ose-utils | ssh cloud-user@<instsance ip> tar xf -
# ssh cloud-user@<instance-ip>
# [cloud-user@ip]$ sudo -i
# [root@ip]# bash /home/cloud-user/ose-utils/provisioning/openstack/create_base_image
#

#
# CONSTANTS
#

SCRIPT_BASE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
REPO_BASE_NAME=$( basename $( dirname $( dirname ${SCRIPT_BASE_DIR} ) ) )
DEFAULT_SRC_IMAGE_NAME="_OS1_rhel-guest-image-7.1-20150224.0.x86_64.qcow2"
INSTANCE_NAME="ose-test-img"


#
# GLOBALS
#

declare -A RHN


#
# HELPERS
#

source ${SCRIPT_BASE_DIR}/../lib/helpers
source ${SCRIPT_BASE_DIR}/../lib/constants


#
# "PUBLIC" FUNCTIONS
#

function usage()
{
  echo "Usage: "
  echo "  $0 -k <key>"
  echo ""
  echo "  where:"
  echo "    -k|--key   : OS1 key"
  echo ""
}

function obtainRHNdetails()
{
  echo "This tool will run RHN subscription-manager."
  echo "Please provide your RHN username/password, and a subscription pool id, when prompted."
  echo "Please exit now (ctrl+c) if you don't have this information available."

  i=9
  while [ $i -gt 0 ]
  do
    echo -ne "  ${i} ...\033[0K\r"
    i=$((i-1))
    sleep 1
  done

  echo
  echo -n "RHN Username: "
  read RHN['username']

  echo -n "RHN password: "
  read -s RHN['password']
  echo

  echo -n "RHN pool id: "
  read RHN['poolid']

  # Check for prereqs
  if [ -z "${RHN['username']}" ] || [ -z "${RHN['password']}" ] || [ -z "${RHN['poolid']}" ]; then
    echo "Missing some RHN info. Please retry..."
    exit 1
  fi

  echo "Thank you! Proceeding..."
}

function provisionImage()
{
  flavor=${1}

  command="${SCRIPT_BASE_DIR}/provision.sh \
    --instance-name ${NewImageName} \
    --key ${Key} \
    --image-name ${DEFAULT_SRC_IMAGE_NAME} \
    --flavor ${flavor} \
    --debug \
    --n"

  $command || error_out "Image Provision failed." ${ERROR_CODE_PROVISION_FAILURE}
}


function tailorImage()
{
  ip=${1}

  RHN_file="/tmp/rhn"

  # Clean out previous install attempts
  ${SSH_CMD} cloud-user@${ip} "rm -rf ~/${REPO_BASE_NAME}"

  # Script is executed from ${REPO_BASE_NAME}/provisioning/openstack, so we need to strip three directories
  pushd $(dirname $(dirname $(dirname ${SCRIPT_BASE_DIR}))) >/dev/null
    # Pull repo into image so we can continue installation
    tar cf - ${REPO_BASE_NAME} | ${SSH_CMD} cloud-user@${ip} tar xf -
  popd >/dev/null

  ${SSH_CMD} cloud-user@${ip}  "
  rm -f ${RHN_file}
  echo \"user=${RHN['username']}\" >> ${RHN_file}
  echo \"passwd=${RHN['password']}\" >> ${RHN_file}
  echo \"poolid=${RHN['poolid']}\" >> ${RHN_file}
  echo \"remove=yes\" >> ${RHN_file}
  "

  ${SSH_CMD} -t cloud-user@${ip} "sudo ~/${REPO_BASE_NAME}/provisioning/openstack/tailor_image --rhn-file=${RHN_file}"
}

function postSteps()
{
  ip=${1}
  flavor=${2}

  command="${SCRIPT_BASE_DIR}/provision.sh \
    --action snapshot
    --image-name ${NewImageName} \
    --flavor ${flavor} \
    --ips ${ip} \
    --debug \
    --n"

  $command || error_out "Image Snapshot failed." ${ERROR_CODE_PROVISION_FAILURE}
}


function cleanup()
{
  ip=${1}

  echo "Deleting Instance ..."

  command="${SCRIPT_BASE_DIR}/provision.sh
  --action delete_by_ip \
  --ips ${ip} \
  --debug \
  --n"
  $command || error_out "Delete failed." ${ERROR_CODE_PROVISION_FAILURE}
}



#
# MAIN - main execution starts below
#

for i in "$@"
do
  case $i in
    -k=*|--key=*)
      Key="${i#*=}"
      shift;;
    -h|--help)
      usage
      exit 0
    ;;

    *)
      echo "Invalid Option: ${i#*=}"
      exit 1;
    ;;

  esac
done

if [ -z "${Key}" ]
then
  echo "Missing required args"
  usage
  exit 1
fi

obtainRHNdetails

Images=()

# Right now only one flavor is built, but multiple flavors can be built
# by just updating the list below - in that case, may want to append the flavor to
# the "NewImageName"...
for flavor in m1.large
do
  current_time=`date +%H%M-%d-%h-%Y`
  NewImageName="${INSTANCE_NAME}-${current_time}"

  echo "Provisioning New Instance, image: ${DEFAULT_SRC_IMAGE_NAME}, name: ${NewImageName} ..."
  imageIPs=$(provisionImage "${flavor}")
  [ $? -ne 0 ] && error_out "Failed to start up new instance." $ERROR_CODE_PROVISION_FAILURE

  imagePublicIP=$(get_public_ips "${imageIPs}")
 
  echo "Tailoring image ..."
  tailorImage "${imagePublicIP}"

  echo "Making Image Snapshot ..."
  postSteps "${imagePublicIP}" "${flavor}"
  [ $? -ne 0 ] && error_out "Post Steps failed." $ERROR_CODE_PROVISION_FAILURE

  cleanup "${imagePublicIP}"
  Images+=("${NewImageName}")
done

echo "Successfully built images:"
for name in "${Images[@]}"
do
  echo "- ${name}"
done

echo

exit 0

