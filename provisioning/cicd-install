#!/bin/bash

#
# Installs and Configures the CI/CD Server
#
# * Java JDK
# * Apache Maven
# * Jenkins CI Server
# * Sonatype Nexus Artifact Repository
# * Docker Server
#

set -e

#
# Constants
#

CICD_SETUP_DIR=/tmp/cicd-setup
CLOUD_ENV=0
NEXUS_VERSION=2.11.4-01
GROOVY_VERSION=2.4.4
DOCKER_VOLUME=/dev/vdb

SCRIPT_BASE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

## Functions
source ${SCRIPT_BASE_DIR}/lib/helpers
source ${SCRIPT_BASE_DIR}/lib/constants

# Set Trap
trap clean_up EXIT

function clean_up() {

  if [ $? -eq 0 ]; then
	echo
	echo "====================================================="  
	echo "= CICD Server Provisioning Completed Successfully!  ="
	echo "====================================================="  
	echo
  else
  	echo
  	echo "====================================================="  
  	echo "= CICD Server Provisioning Failed!                  ="
  	echo "====================================================="  
  	echo
fi

  # Cleanup
  rm -rf ${CICD_SETUP_DIR}

}


#
# Function to install prerequisite packages
#

function check_prereqs() {
	
	# Validate Docker volume exists
	if [ ! -b $DOCKER_VOLUME ]; then
		error_out "Docker Volume ($DOCKER_VOLUME) does not exist" 1
	fi
}

#
# Function to install prerequisite packages
#

function install_prereqs() {
	
	# EPEL and software packages	
	yum install -y install http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm wget unzip git vim firewalld &>/dev/null || error_out "Failed to install prerequisite software" 2

	# JQ must be installed only after EPEL installed
	yum --enablerepo=epel install -y jq &>/dev/null || error_out "Failed to install prerequisite software" 2
	
	# Start and enable firewalld
	systemctl enable firewalld
	systemctl start firewalld

}

#
# Function to install the Java JDK
#

function install_java_jdk() {
   subscription-manager repos --enable rhel-7-server-eus-thirdparty-oracle-java-rpms
   yum install -y java-1.7.0-oracle-devel &>/dev/null || error_out "Failed to install Java JDK" 3
}


#
# Function to install additional Jenkins plugins
#
# Parameters:
# $1 - Name of the Jenkins plugin
# $2 - Version of the Jenkins plugin
#

function install_jenkins_plugin() {
	
	plugin_name=${1}
	plugin_version=${2}
	
	wget -O /var/lib/jenkins/plugins/${plugin_name}.hpi https://updates.jenkins-ci.org/download/plugins/${plugin_name}/${plugin_version}/${plugin_name}.hpi 
	
}


#
# Function to install and configure the Jenkins CI server
#

function install_jenkins() {

  wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo
  rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
  yum install -y jenkins  &>/dev/null || error_out "Failed to install Jenkins" 5
  
  cp -R ${SCRIPT_BASE_DIR}/cicd/jenkins/* /var/lib/jenkins

  # Update Jenkins context
  sed -i "s/JENKINS_ARGS=\"\"/JENKINS_ARGS=\"--prefix=\/jenkins\"/g" /etc/sysconfig/jenkins
  
  # Create a Docker group and add Jenkins so it will be able to execute Docker commands
  groupadd docker
  usermod -a -G docker jenkins
  
  # Install plugins
  mkdir -p /var/lib/jenkins/plugins
  
  install_jenkins_plugin 'github' '1.13.1'
  install_jenkins_plugin 'github-api' '1.69'
  install_jenkins_plugin 'git' '2.4.0'
  install_jenkins_plugin 'git-client' '1.18.0'
  install_jenkins_plugin 'credentials' '1.23'
  install_jenkins_plugin 'scm-api' '0.2'
  install_jenkins_plugin 'credentials-binding' '1.5'
  install_jenkins_plugin 'plain-credentials' '1.1'
  install_jenkins_plugin 'workflow-step-api' '1.9'
  install_jenkins_plugin 'parameterized-trigger' '2.28'
  install_jenkins_plugin 'matrix-project' '1.4.1'
  install_jenkins_plugin 'promoted-builds' '2.21'
  install_jenkins_plugin 'rebuild' '1.25'
  install_jenkins_plugin 'subversion' '1.54'
  install_jenkins_plugin 'scm-api' '0.2'
  install_jenkins_plugin 'ssh-credentials' '1.10'
  install_jenkins_plugin 'mapdb-api' '1.0.6.0'
  install_jenkins_plugin 'build-pipeline-plugin' '1.4.7'  
  install_jenkins_plugin 'jquery' '1.11.2-0'
  install_jenkins_plugin 'delivery-pipeline-plugin' '0.9.7'
  install_jenkins_plugin 'token-macro' '1.10'
  install_jenkins_plugin 'ws-cleanup' '0.28'
  install_jenkins_plugin 'job-dsl' '1.37'
  install_jenkins_plugin 'cloudbees-folder' '4.9'
  install_jenkins_plugin 'groovy' '1.27'
  install_jenkins_plugin 'groovy-postbuild' '2.2.1'
  install_jenkins_plugin 'script-security' '1.15'
  
  # Manual corrections for credentials plugin
  mv /var/lib/jenkins/plugins/credentials.hpi /var/lib/jenkins/plugins/credentials.jpi
  touch /var/lib/jenkins/plugins/credentials.jpi.pinned

  chown -R jenkins:jenkins /var/lib/jenkins
  
  firewall-cmd --zone=public --add-port=8080/tcp --permanent
  firewall-cmd --reload

  chkconfig jenkins on
  service jenkins start

}

#
# Function to install Groovy
#

function install_groovy() {

  wget -O ${CICD_SETUP_DIR}/apache-groovy-binary-${GROOVY_VERSION}.zip http://dl.bintray.com/groovy/maven/apache-groovy-binary-${GROOVY_VERSION}.zip
  unzip ${CICD_SETUP_DIR}/apache-groovy-binary-${GROOVY_VERSION}.zip -d /usr/local
  ln -s /usr/local/groovy-${GROOVY_VERSION} /usr/local/groovy
  echo "export GROOVY_HOME=/usr/local/groovy-${GROOVY_VERSION}" >> /etc/profile
  echo "export PATH=\$PATH:\$GROOVY_HOME/bin" >> /etc/profile
  source /etc/profile

}

#
# Function to install Apache Maven
#

function install_maven() {

  yum install -y maven  &>/dev/null || error_out "Failed to install Maven" 4
  
  cp -f ${SCRIPT_BASE_DIR}/cicd/maven/settings.xml /usr/share/maven/conf/
}

#
# Function to install the Nexus repository manager
#

function install_nexus() {
 
  wget -O ${CICD_SETUP_DIR}/nexus-${NEXUS_VERSION}-bundle.tar.gz https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-${NEXUS_VERSION}-bundle.tar.gz
  tar xzf ${CICD_SETUP_DIR}/nexus-${NEXUS_VERSION}-bundle.tar.gz -C /usr/local 
  ln -s /usr/local/nexus-${NEXUS_VERSION} /usr/local/nexus
  useradd -m -d /usr/local/nexus -s /bin/bash nexus
  echo "export NEXUS_HOME=/usr/local/nexus" >> /etc/profile
  mkdir -p /var/run/nexus
  
  # Copy Configuration File
  mkdir -p /usr/local/sonatype-work/nexus/conf
  cp -f ${SCRIPT_BASE_DIR}/cicd/nexus/nexus.xml /usr/local/sonatype-work/nexus/conf/
  
  chown -R nexus:nexus /usr/local/nexus* /usr/local/sonatype-work /var/run/nexus

  sed -i "s/NEXUS_HOME=\"..\"/NEXUS_HOME=\"\/usr\/local\/nexus\"/g" /usr/local/nexus/bin/nexus
  sed -i "s/#PIDDIR=\".\"/PIDDIR=\"\/usr\/local\/nexus\/bin\/jsw\/linux-x86-64\"/g" /usr/local/nexus/bin/nexus
  sed -i "s/#RUN_AS_USER=/RUN_AS_USER=\"nexus\"/g" /usr/local/nexus/bin/nexus
  
  firewall-cmd --zone=public --add-port=8081/tcp --permanent
  firewall-cmd --reload
  
  cp -f ${SCRIPT_BASE_DIR}/cicd/nexus/nexus.service /etc/systemd/system/
  chmod 664 /etc/systemd/system/nexus.service
  
  systemctl daemon-reload
  systemctl start nexus
  systemctl enable nexus

}

#
# Function to install and configure HTTPD
#

function install_httpd() {
	yum -y install httpd &>/dev/null || error_out "Failed to install HTTPD" 5

	# Reverse proxy configuration file
	cat <<EOF > /etc/httpd/conf.d/cicd.conf
ProxyRequests Off
ProxyPreserveHost On
AllowEncodedSlashes NoDecode

<VirtualHost *:80>

  ProxyPass /nexus http://localhost:8081/nexus
  ProxyPassReverse /nexus http://localhost:8081/nexus

  ProxyPass         /jenkins  http://localhost:8080/jenkins nocanon
  ProxyPassReverse  /jenkins  http://localhost:8080/jenkins

</VirtualHost>

EOF

	# Default Index file
	cat <<EOF > /var/www/html/index.html
<html>
  <title>OpenShift CICD Server</title>
  <body>
    <h1><strong>OpenShift CICD Server</strong></h1>
    <ul>
      <li><a href="/jenkins">Jenkins</a></p></li>
      <li><a href="/nexus">Nexus</a></p></li>
    </ul>
  </body>
</html>

EOF

	setsebool -P httpd_can_network_connect true

    firewall-cmd --zone=public --add-port=80/tcp --permanent
    firewall-cmd --reload

	systemctl start httpd
	systemctl enable httpd
}

#
# Function to install and configure Docker
#

function install_docker() {
	yum -y install docker &>/dev/null || error_out "Failed to install Docker" 6
	sed -i "s/OPTIONS='--selinux-enabled'/OPTIONS='--selinux-enabled --insecure-registry 172.30.0.0\/16'/" /etc/sysconfig/docker

	# Allocate an entire volume for Docker Storage
	cat <<EOF > /etc/sysconfig/docker-storage-setup
DEVS=$DOCKER_VOLUME
VG=docker-vg
EOF
	
	docker-storage-setup
	
	systemctl start docker
	systemctl enable docker
}


echo "===================================="
echo "=   Installing CI/CD Environment   ="
echo "===================================="

# Create a scratch directory
mkdir -p ${CICD_SETUP_DIR}

echo
echo "--- Validating Prerequisites ---"
echo
check_prereqs

echo
echo "--- Installing Prerequisite Software ---"
echo
install_prereqs

echo
echo "--- Installing Java ---"
echo
install_java_jdk

echo
echo "--- Installing Groovy ---"
echo
install_groovy

echo
echo "--- Installing Maven ---" 
echo
install_maven

echo
echo "--- Installing Jenkins ---" 
echo
install_jenkins

echo
echo "--- Installing Nexus ---" 
echo
install_nexus

echo
echo "--- Installing HTTPD ---"
echo
install_httpd

echo
echo "--- Installing Docker ---" 
echo
install_docker

