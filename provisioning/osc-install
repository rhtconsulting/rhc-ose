#!/bin/bash -

SCRIPT_BASE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

## Functions
source ${SCRIPT_BASE_DIR}/lib/helpers
source ${SCRIPT_BASE_DIR}/lib/constants

# Show script usage
usage() {
  echo "Usage: $0 -m=|--master=\"<master1 private ip|master1 public ip>\" -e=|--etcd=\"<etcd1 private ip|etcd1 public ip>,...,<etcdN private ip|etcdN public ip>\" -n=|--nodes=\"<node1 private ip|node1 public ip>,...,<nodeN private ip|nodeN public ip>\" -a|--actions=\"action1,action2,...actionN\""
}

# Determine whether master is a node, and if not, make node1 the 'infra' node
find_infra_node() {
  contains "master.${OPENSHIFT_BASE_DOMAIN}" ${NODE_HOSTNAMES//,/ }
  if [ $? -eq 0 ]; then
    echo "master.${OPENSHIFT_BASE_DOMAIN}"
  else
    echo "node1.${OPENSHIFT_BASE_DOMAIN}"
  fi
}

# Randomly selects zone
select_zone() {
  # Seed random generator
  RANDOM=$$$(date +%s)

  echo ${openshift_zones[$RANDOM % ${#openshift_zones[@]} ]}
}

process_actions() {
  valid_actions='prep dns install post'
  declare -a requested_actions=(${1//,/ })
  declare -a final_actions

  i=0
  for action in ${valid_actions}; do
    contains "$action" "${requested_actions[@]}"
    [ "$?" == 0 ] && final_actions[$i]="$action" && requested_actions=( ${requested_actions[@]/$action/})
    ((i++))
  done

  [ ! -z ${requested_actions} ] && echo "Unrecognized actions: ${requested_actions[@]}" && exit 1

  for action in ${final_actions[@]}; do
    do_$action
  done
}

setup_ansible() {
  infra_node=$(find_infra_node)
  for node in ${NODE_HOSTNAMES//,/ }; do
    if contains "${infra_node}" "${node}"; then
      region="infra"
      zone="default"
    else
      region="primary"
      zone="$( select_zone )"
    fi

    # The node is a master, then we want to make it unschedulable
    if contains "master" "${node}"; then
      node_opts="openshift_scheduleable=False"
    fi
    # This is a hack to make sure we don't get host key checks during ansible run
    validate_ssh ${node}

    read -d '' NODESTRING <<EOF
$NODESTRING
${node} openshift_hostname=${node} openshift_public_hostname=${node} openshift_node_labels="{'region': '${region}', 'zone': '${zone}'}" ${node_opts}
EOF

  done

#  if [ !$etcd_on_master ]; then
#    mv ${SCRIPT_BASE_DIR}/templates/ansible-hosts ${SCRIPT_BASE_DIR}/templates/ansible-hosts.template
#    sed '/^{{MASTER_HOSTNAME}}$/d' ${SCRIPT_BASE_DIR}/templates/ansible-hosts.template > ${SCRIPT_BASE_DIR}/templates/ansible-hosts
#  fi

#  ETCD_HOST_NAMES=`echo $ETCD_HOSTNAMES | sed 's/,/\\\n/g'`
  for etcd in ${ETCD_HOSTNAMES//,/ }; do
    # This is a hack to make sure we don't get host key checks during ansible run
    validate_ssh ${etcd}

    read -d '' ETCDSTRING <<EOF
$ETCDSTRING
${etcd} openshift_hostname=${etcd} openshift_public_hostname=${etcd}
EOF

  done

  # Prepare the apps sub domain:
  CLOUDAPPS_SUBDOMAIN="${OPENSHIFT_CLOUDAPPS_SUBDOMAIN}.${OPENSHIFT_BASE_DOMAIN}"

  if [ -z "${OPENSHIFT_IDENTITY_PROVIDER_JSON}" ]; then
    error_out "OPENSHIFT_IDENTITY_PROVIDER_JSON cannot be empty: ${OPENSHIFT_IDENTITY_PROVIDER_JSON}"
  fi
  echo "process_template ${SCRIPT_BASE_DIR}/templates/ansible-hosts MASTER_HOSTNAME ETCDSTRING NODESTRING CLOUDAPPS_SUBDOMAIN OPENSHIFT_IDENTITY_PROVIDER_JSON"
  ansible_hosts_file="$(process_template ${SCRIPT_BASE_DIR}/templates/ansible-hosts MASTER_HOSTNAME ETCDSTRING NODESTRING CLOUDAPPS_SUBDOMAIN OPENSHIFT_IDENTITY_PROVIDER_JSON)"

  cd
  rm -rf ~/openshift-ansible
  git clone https://github.com/openshift/openshift-ansible

  echo "$ansible_hosts_file" > /etc/ansible/hosts

  # Disable host key checking so ansible script doesn't stall
  echo "StrictHostKeyChecking=no" >> /root/.ssh/config
}

setup_authentication() {
  ${SSH_CMD} root@${MASTER_HOSTNAME} "
    users=\"${OPENSHIFT_USERS}\"

    # Set up authentication
    yum -y install httpd-tools &>/dev/null || error_out \"Failed to install httpd-tools\"
    touch ${openshift_install_dir}/openshift-passwd
    for user in \$users; do
      htpasswd -b ${openshift_install_dir}/openshift-passwd \${user%:*} \${user#*:}
    done

    systemctl restart ${openshift_master_service}
"
}

setup_cleanup_job() {
  for host in ${MASTER_HOSTNAME} ${NODE_HOSTNAMES//,/ }; do
    ${SCP_CMD} ${SCRIPT_BASE_DIR}/templates/weekly_docker_cleanup root@${host}:/etc/cron.weekly/.
    ${SSH_CMD} root@${host} "chmod +x /etc/cron.weekly/weekly_docker_cleanup"
  done
}

setup_topology() {
  # Create a custom scheduler topology based on user input
  # TODO
  echo
}

setup_training_repo() {
  cd
  rm -rf ~/training
  git clone https://github.com/openshift/training.git
  cd
}

setup_storage() {
  setup_logging_storage ${OPENSHIFT_STORAGE_DISK_VOLUME} ${OPENSHIFT_STORAGE_SIZE_LOGGING}
  [ $? -eq 0 ] || error_out "Could not setup logging storage" ${ERROR_CODE_STORAGE_FAILURE}

  setup_lvm_storage ${OPENSHIFT_STORAGE_DISK_VOLUME} ${OPENSHIFT_STORAGE_SIZE_OSE} "openshift"
  [ $? -eq 0 ] || error_out "Could not setup openshift storage" ${ERROR_CODE_STORAGE_FAILURE}

  setup_lvm_storage ${OPENSHIFT_STORAGE_DISK_VOLUME} ${OPENSHIFT_STORAGE_SIZE_ETCD} "etcd"
  [ $? -eq 0 ] || error_out "Could not setup etcd storage" ${ERROR_CODE_STORAGE_FAILURE}

  # Always run the docker storage setup last as it will use what's left of the disk
  setup_docker_storage ${OPENSHIFT_STORAGE_DISK_VOLUME}
  [ $? -eq 0 ] || error_out "Could not setup docker storage" ${ERROR_CODE_STORAGE_FAILURE}

  return 0
}

setup_storage_on_all_hosts() {
  for host in ${MASTER_HOSTNAME} ${NODE_HOSTNAMES//,/ } ${ETCD_HOSTNAMES//,/ }; do
    ${SSH_CMD} root@${host} "$(typeset -f); $(typeset -p OPENSHIFT_STORAGE_DISK_VOLUME); $(typeset -p OPENSHIFT_STORAGE_SIZE_OSE); $(typeset -p OPENSHIFT_STORAGE_SIZE_ETCD); $(typeset -p OPENSHIFT_STORAGE_SIZE_LOGGING); setup_storage"
  done
}

# Usage: validate_ssh <hostname>
validate_ssh() {
    ${SSH_CMD} root@${1} exit
    [ $? -eq 0 ] || error_out "Could not establish ssh connection to ${1}" ${ERROR_CODE_SSH_FAILURE}
}

## Action functions
do_prep() {
  echo "Beginning action: Prep"
  yum clean all
  yum -y update &>/dev/null || error_out "Failed to run yum update during Prep phase."

  for host in $(get_private_ips ${NODES} | sed 's/,/ /g'); do
    ${SSH_CMD} root@${host} "yum clean all; yum update -y"
  done
}

do_dns() {
  echo "Beginning action: DNS"
  command="bash ${SCRIPT_BASE_DIR}/osc-dns-config -m=${MASTER} -e=${ETCD} -n=${NODES} -b=${OPENSHIFT_BASE_DOMAIN} -d=${NODES##*,} -w=${NODES%%,*} -p=${OPENSHIFT_CLOUDAPPS_SUBDOMAIN}"
  $command || error_out "DNS Install & Configuration failed." $ERROR_CODE_DNS_FAILURE
}

do_install() {
  if [ -z $MASTER ] || [ -z $NODES ]; then
    echo "Missing required args"
    usage
    exit 1
  fi

  MASTER_HOSTNAME=$(get_hostnames $(get_private_ips "${MASTER}") "${OPENSHIFT_BASE_DOMAIN}")
  ETCD_HOSTNAMES=$(get_hostnames $(get_private_ips "${ETCD}") "${OPENSHIFT_BASE_DOMAIN}")
  NODE_HOSTNAMES=$(get_hostnames $(get_private_ips "${NODES}") "${OPENSHIFT_BASE_DOMAIN}")

  echo "Install"

  setup_storage_on_all_hosts || error_out "Storage Setup had failures" $ERROR_CODE_STORAGE_FAILURE
  setup_training_repo
  setup_ansible

  # Run ansible
  command="ansible-playbook ${ansible_playbook}"
  $command || error_out "Ansible install had failures" $ERROR_CODE_ANSIBLE_INSTALL_FAILURE
}

do_post(){
  echo "Post Install"
  setup_authentication

  do_create_router

  do_create_registry

  setup_cleanup_job

  ###########################################
  ### Workarounds for current issues - START

  # Remove --insecure-registry flag set by ansible (https://github.com/openshift/openshift-ansible/issues/497)
  for node in ${NODE_HOSTNAMES//,/ } ${ETCD_HOSTNAMES//,/ }; do
    $SSH_CMD $node 'sed -i "s/--insecure-registry=172.30.0.0\/16//" /etc/sysconfig/docker && systemctl restart docker'
  done

  # Workaround for OSE v3.1.1 issue with the registry storage permissions (https://access.redhat.com/solutions/2173071)
  ${SSH_CMD} root@${MASTER_HOSTNAME} "chown -R 1001 /mnt/registry"

  ### Workarounds for current issues - END
  ###########################################
}

# Create router infrastructure
do_create_router() {
  CA="${openshift_install_dir}/${openshift_master_dir}"

  ${SSH_CMD} root@${MASTER_HOSTNAME} "
    # First, a bit of cleanup so we can re-run and update things
    for resource in service deploymentConfig pod route serviceaccount; do
      resource_names=\$(oc get \$resource | awk '/router/ {print \$1}')
      for name in \${resource_names/\'\\n\'/ }; do
        oc delete \$resource \$name
      done
    done

    oadm ca create-server-cert \
      --signer-cert=$CA/ca.crt \
      --signer-key=$CA/ca.key \
      --signer-serial=$CA/ca.serial.txt \
      --hostnames=\"*.${OPENSHIFT_CLOUDAPPS_SUBDOMAIN}.${OPENSHIFT_BASE_DOMAIN}\" \
      --cert=$CA/cloudapps.crt \
      --key=$CA/cloudapps.key

    cat $CA/cloudapps.crt $CA/cloudapps.key $CA/ca.crt > $CA/cloudapps.router.pem

    echo '{\"kind\":\"ServiceAccount\",\"apiVersion\":\"v1\",\"metadata\":{\"name\":\"router\"}}' | oc create -f -
    oc get scc privileged -o yaml > priv.yaml
    if [ \$(grep -c \'system:serviceaccount:default:router\' priv.yaml) -eq 0 ]; then
      echo '- system:serviceaccount:default:router' >> priv.yaml
      oc replace scc privileged -f priv.yaml
    fi

    oadm router router-default \
      --default-cert=$CA/cloudapps.router.pem \
      --credentials=\"${openshift_install_dir}/${openshift_master_dir}/openshift-router.kubeconfig\" \
      --selector='region=infra' \
      --images='registry.access.redhat.com/openshift3/ose-\${component}:\${version}' \
      --service-account=router
"
}

do_create_registry() {
  CA="${openshift_install_dir}/${openshift_master_dir}"

  ${SSH_CMD} root@${MASTER_HOSTNAME} "
    # First, a bit of cleanup so we can re-run and update things
    for resource in service deploymentConfig pod route serviceaccount secret; do
      resource_names=\$(oc get \$resource | awk '/registry/ {print \$1}')
      for name in \${resource_names/\'\\n\'/ }; do
        oc delete \$resource \$name
      done
    done

    # Create registry
    mkdir -p /mnt/registry

    echo '{\"kind\":\"ServiceAccount\",\"apiVersion\":\"v1\",\"metadata\":{\"name\":\"registry\"}}' | oc create -f -
    oc get scc privileged -o yaml > priv.yaml
    if [ \$(grep -c \'system:serviceaccount:default:registry\' priv.yaml) -eq 0 ]; then
      echo '- system:serviceaccount:default:registry' >> priv.yaml
      oc replace scc privileged -f priv.yaml
    fi

    created_resources=\$(oadm registry --service-account=registry \
      --config=\"${openshift_install_dir}/${openshift_master_dir}/admin.kubeconfig\" \
      --credentials=\"${openshift_install_dir}/${openshift_master_dir}/openshift-registry.kubeconfig\" \
      --images='registry.access.redhat.com/openshift3/ose-\${component}:\${version}' \
      --selector='region=infra' \
      --mount-host=/mnt/registry)

    service_name=\$(oc get service | awk '/registry/ {print \$1}')
    service_ip=\$(oc get service \$service_name | awk '/registry/ {print \$2}')
    dc_name=\$(oc get deploymentconfig | awk '/registry/ {print \$1}')

    # Secure the Registry
    oadm ca create-server-cert --signer-cert=$CA/ca.crt \
      --signer-key=$CA/ca.key \
      --signer-serial=$CA/ca.serial.txt  \
      --hostnames=\"registry.${OPENSHIFT_CLOUDAPPS_SUBDOMAIN}.${OPENSHIFT_BASE_DOMAIN},docker-registry.default.svc.cluster.local,\${service_ip}\" \
      --cert=$CA/registry.crt \
      --key=$CA/registry.key

    oc secrets new registry-secret $CA/registry.crt $CA/registry.key

    oc secrets add serviceaccounts/registry secrets/registry-secret

    oc volume deploymentConfig/\$dc_name --add --type=secret --secret-name=registry-secret -m /etc/secrets

    oc env deploymentConfig/\$dc_name REGISTRY_HTTP_TLS_CERTIFICATE=/etc/secrets/registry.crt REGISTRY_HTTP_TLS_KEY=/etc/secrets/registry.key

    # Fix secured registry in OSE 3.1.1 (https://bugzilla.redhat.com/show_bug.cgi?id=1302956)
    oc get dc \$service_name -o yaml | sed -e 's/scheme: HTTP/scheme: HTTPS/g' | oc replace -f -
"

  # Create Route for External Access
  service_name=$($SSH_CMD root@${MASTER_HOSTNAME} "oc get service | awk '/registry/ {print \$1}'")
  SERVICE_NAME=$service_name
  HOSTNAME=registry.${OPENSHIFT_CLOUDAPPS_SUBDOMAIN}.${OPENSHIFT_BASE_DOMAIN}
  route_resource=$(process_template ${SCRIPT_BASE_DIR}/templates/registry-route.json SERVICE_NAME HOSTNAME )

  echo "${route_resource}" | $SSH_CMD root@${MASTER_HOSTNAME} "oc create -f -"

  # Trust certs from all nodes - first obtain some info from the master, then copy the certs to the nodes
  service_ip=$($SSH_CMD root@${MASTER_HOSTNAME} "oc get service ${service_name} | awk '/registry/ {print \$2}'")
  ca_cert=$($SSH_CMD root@${MASTER_HOSTNAME} "cat $CA/ca.crt")

  certs_dirs="/etc/docker/certs.d/${service_ip}:5000 /etc/docker/certs.d/docker-registry.default.svc.cluster.local:5000"
  for node in ${NODE_HOSTNAMES//,/ }; do
    for dir in $certs_dirs; do
      $SSH_CMD $node "mkdir -p $dir"
      echo "${ca_cert}" | $SSH_CMD root@${node} "cat >> $dir/ca.crt"
    done
    $SSH_CMD $node "systemctl daemon-reload && systemctl restart docker && systemctl restart ${openshift_node_service}"
  done
}

# Process input
for i in "$@"
do
  case $i in
    -m=*|--master=*)
      MASTER="${i#*=}"
      shift;;
    -e=*|--etcd=*)
      ETCD="${i#*=}"
      shift;;
    -n=*|--nodes=*)
      NODES="${i#*=}"
      shift;;
    -a=*|--actions=*)
      ACTIONS="${i#*=}"
      shift;;
    *)
      echo "Invalid Option: ${i#*=}"
      exit 1;
      ;;
  esac
done

if [ -z $ACTIONS ]; then
  echo "Missing required args"
  usage
  exit 1
fi

source ${SCRIPT_BASE_DIR}/lib/error_codes

# Set up environment based on default values and User input
OPENSHIFT_VERSION=${CONF_OPENSHIFT_VERSION:=$openshift_version}
ANSIBLE_BRANCH=${CONF_ANSIBLE_BRANCH:=$ansible_branch}
OPENSHIFT_USERS=${CONF_OPENSHIFT_USERS:=$openshift_users}
OPENSHIFT_BASE_DOMAIN=${CONF_OPENSHIFT_BASE_DOMAIN:=$openshift_base_domain}
OPENSHIFT_CLOUDAPPS_SUBDOMAIN=${CONF_OPENSHIFT_CLOUDAPPS_SUBDOMAIN:=$cloudapps_subdomain}
OPENSHIFT_MASTER_CONFIG="${openshift_install_dir}/${openshift_master_dir}/${openshift_master_config}"
OPENSHIFT_ZONES=$openshift_zones
OPENSHIFT_STORAGE_DISK_VOLUME=${CONF_STORAGE_DISK_VOLUME:=$storage_disk_volume}
OPENSHIFT_STORAGE_SIZE_OSE=${CONF_STORAGE_SIZE_OSE:=$storage_size_ose}
OPENSHIFT_STORAGE_SIZE_ETCD=${CONF_STORAGE_SIZE_ETCD:=$storage_size_etcd}
OPENSHIFT_STORAGE_SIZE_LOGGING=${CONF_STORAGE_SIZE_LOGGING:=$storage_size_logging}
OPENSHIFT_IDENTITY_PROVIDER_JSON="${CONF_OPENSHIFT_IDENTITY_PROVIDER_JSON:=$openshift_identity_provider_json}"
#OPENSHIFT_ETCD_ON_MASTER=${CONF_OPENSHIFT_ETCD_ON_MASTER:=$etcd_on_master}

# Begin installation phases
process_actions ${ACTIONS?"Missing argument -a or --action"}

exit 0;
