# Usage: error_out <message> <error_code>
error_out() {
  echo "ERROR: ${1}"
  exit $2
}

# Usage: yum_install <yum options> <packages> <Exit on failure? true|false> <exit code>
yum_install() {
  options=${1}
  packages=${2?"No Packages Declared for Install. Something went wrong."}
  exit_on_failure=${3:-true}
  exit_code=${4:-$ERROR_CODE_YUM_FAILURE}

  message=$(yum -y ${options} install ${packages} 2>&1)
  if [ $? -ne 0 ]; then
    if [ $(echo ${message} | grep -c 'Error: Nothing to do') -eq 0 ] && $exit_on_failure; then
      error_out "Failed to install packages ${packages}
Message:
${message}" $exit_code
    fi
  fi
}

# Usage: get_hostnames "<ip address>,<ip address>,...,<ip address>" "<base dn>" "[<dns server ip>]"
get_hostnames() {
  # Can reverse lookup hostname for an ip with
  # dig -x 172.16.166.11 | sed -ne 's/.*\(node[0-9]*.ose.example.com\).*/\1/p'
  if [ -n "$3" ]; then
    local nameserver="@${3}"
  fi
  for ip in ${1//,/ }; do
    hostnames="${hostnames},$(dig $nameserver -x $ip | sed -n "s/.*\(\(master\|node\)[0-9]*.${2}\).*/\1/p" | sort | head -n1)"
  done
  # Strip off leading comma
  echo ${hostnames#,*}
}

# Usage: get_private_ips <private|public,private|public,...>
get_private_ips() {
  echo "$1" | sed 's/|[0-9]*.[0-9]*.[0-9]*.[0-9]*//g'
}

# Usage: get_public_ips <private|public,private|public,...>
get_public_ips() {
  echo "$1" | sed 's/[0-9]*.[0-9]*.[0-9]*.[0-9]*|//g'
}

process_configfile() {
  file=$1
  unset CONF_ENVIRONMENT

  # Filter Configs to make sure only valid key pair values are acted upton
  configs=$(egrep '^[^ ]*=[^;&]*' $file | grep -v '^#' | sed 's/#.*//g')

  # export all variables to the environment
  for var in ${configs//'\n'/ }; do
    CONF_ENVIRONMENT="${CONF_ENVIRONMENT}export $var"$'\n'
    export $var
  done

  # handle special cases

  # Setup user-defined auth Provider
  if [ -f ${CONF_OPENSHIFT_IDENTITY_PROVIDER} ]; then
    # User is providing a file containing custom auth provider, load it
    CONF_OPENSHIFT_IDENTITY_PROVIDER_JSON=$(cat ${CONF_OPENSHIFT_IDENTITY_PROVIDER} | sed -e 's/[\/&]/\\&/g')
  else
    # Use the matching provider in templates directory
    CONF_OPENSHIFT_IDENTITY_PROVIDER_JSON=$(cat ${SCRIPT_BASE_DIR}/templates/${CONF_OPENSHIFT_IDENTITY_PROVIDER} | sed -e 's/[\/&]/\\&/g')
  fi

  CONF_ENVIRONMENT="${CONF_ENVIRONMENT}export CONF_OPENSHIFT_IDENTITY_PROVIDER_JSON=\"${CONF_OPENSHIFT_IDENTITY_PROVIDER_JSON}\""$'\n'
  export CONF_OPENSHIFT_IDENTITY_PROVIDER_JSON="${CONF_OPENSHIFT_IDENTITY_PROVIDER_JSON}"
}

## Template Format ##

# Variables take the form '{{VARNAME}}'
# Sample template, /my/template/file:
#
# {
#   "name": "{{NAME}}",
#   "type": "{{TYPE}}"
# }

# Usage: process_template <template file> ENV_VAR1_NAME ENV_VAR2_NAME ...

# ex.
# MYVAR=something
# MY_OTHER_VAR="here is a
# multi-line variable"
# process_template ./my/template/file MYVAR MY_OTHER_VAR
process_template() {
  local template_file=$1
  shift
  local vars=$@
  local output="$(cat $template_file)"

  for var in $vars; do
    value=${!var}
    echo "${value}" > /tmp/${var}
    output=$(echo "$output" | perl -pe "s/{{$var}}/${value}/g")
  done

  echo "$output"
}

# Usage: partition_disk <path_to_disk> <partition_size>
#  e.g.: partition_disk /dev/vdb 2 <-- creates a 2GB partition on /dev/vdb
function partition_disk() {
  root_disk=${1}
  part_size=${2}

  part_label=`fdisk -l ${root_disk} | sed -n 's/Disk label type: \(.*\)/\1/p'`
  [ "${part_label}" != "dos" ] && parted ${root_disk} --script -- mklabel msdos

  part_start=`parted -m ${root_disk} unit MB print | tail -n 1 | awk -F: '{ print $3 }' | sed -ne 's/^\([0-9]*\)MB$/\1/p'`
  [ -z "${part_start}" ] && part_start=0

  # If we do indeed have some partitions already configured, check to see that we're less than
  # 4 primary - can only handle up to 4 primary partitions for now...
  if [ ${part_start} -ne 0 ]; then
    end_idx=`parted -m ${root_disk} print | tail -n 1 | awk -F: '{ print $1 }'`
    [ ${end_idx} -gt 4 ] && return 1
  fi

  if [ "${part_size}" == "-1" ]; then
    part_end='-1' # Use the rest of the disk ...
  else
    # Multiple by 1000 to make it GB (note that parted uses MB (1000) and not MiB (1024))
    part_end=$(($part_start + $part_size * 1000))
  fi

  parted ${root_disk} --script -- mkpart primary "${part_start}MB" "${part_end}MB"
  [ $? -ne 0 ] && return 1

  partprobe

  part_idx=`parted -m ${root_disk} print | tail -n 1 | awk -F: '{ print $1 }'`

  echo "${root_disk}${part_idx}"
  return 0
}

setup_docker_storage() {
  disk_path=${1}

  # Install and configure docker
  yum -y install docker &>/dev/null || error_out "Failed to install package docker" ${ERROR_CODE_STORAGE_FAILURE}
  # sed -i "s/OPTIONS='--selinux-enabled'/OPTIONS='--selinux-enabled --insecure-registry 172.30.0.0\/16'/" /etc/sysconfig/docker

  vgdisplay vg-docker &>/dev/null
  vg_rc=$?

  if [ ${vg_rc} -eq 0 ]; then
    echo "docker storage already configured!"
    return 0
  fi

  disk_part=`partition_disk ${disk_path} '-1'`
  [ $? -ne 0 ] && return 1

  pvcreate ${disk_part}
  vgcreate vg-docker ${disk_part}

  cat << EOF > /etc/sysconfig/docker-storage-setup
VG=vg-docker
SETUP_LVM_THIN_POOL=yes
EOF

  # Let docker setup the storage based on the above config file
  docker-storage-setup

  return 0
}

setup_openshift_storage() {
  disk_path=${1}
  part_size=${2}

  vgdisplay vg-openshift &>/dev/null
  vg_rc=$?

  if [ ${vg_rc} -eq 0 ]; then
    echo "openshift storage already configured!"
    return 0
  fi

  disk_part=`partition_disk ${disk_path} ${part_size}`
  [ $? -ne 0 ] && return 1

  # Create LVM and set up /var/lib/openshift
  pvcreate ${disk_part}
  vgcreate vg-openshift ${disk_part}
  lvcreate -l 100%FREE -n lv-ose vg-openshift

  mkfs.xfs -q -f /dev/vg-openshift/lv-ose

  mkdir -p /var/lib/openshift
  echo "/dev/vg-openshift/lv-ose        /var/lib/openshift              xfs defaults 0 0" >> /etc/fstab

  mount -a

  return 0
}

setup_logging_storage() {
  disk_path=${1}
  part_size=${2}

  if [ -z "${part_size}" -o ${part_size} -le 0 ]; then
    echo "No separation of /var/log configured - skipping..."
    return 0
  fi

  vgdisplay vg-logging &>/dev/null
  vg_rc=$?

  if [ ${vg_rc} -eq 0 ]; then
    echo "logging storage already configured!"
    return 0
  fi

  disk_part=`partition_disk ${disk_path} ${part_size}`
  [ $? -ne 0 ] && return 1

  # Create LVM and set up /var/log
  pvcreate ${disk_part}
  vgcreate vg-logging ${disk_part}
  lvcreate -l 100%FREE -n lv-logs vg-logging

  mkfs.xfs -q -f /dev/vg-logging/lv-logs

  mkdir -p /mnt/log
  mount /dev/vg-logging/lv-logs /mnt/log
  rsync -a -A -X /var/log/ /mnt/log
  umount /mnt/log
  rmdir /mnt/log

  echo "/dev/vg-logging/lv-logs        /var/log              xfs defaults 0 0" >> /etc/fstab

  mount -a

  systemctl restart rsyslog

  return 0
}

