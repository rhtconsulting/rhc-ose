#!/bin/bash -

#
#   Copyright 2012 Red Hat Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

#
# osc-dns-config - Utility to configure a master DNS server + nodes
#
# Usage: See usage function below
#
# SPECIAL CONSIDERATIONS:
#  - For reverse DNS, only subnets smaller or equal to /16 are supported
#
# TODO:
#  - Fully support multiple master instances.
#



#
# CONSTANTS
#
SCRIPT_BASE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
VAR_NAMED_STATIC_DIR="/var/named/static"
DEFAULT_WILDCARD_PREFIX="apps"
DEFAULT_SUBNET_SIZE=24


#
# GLOBALS
#
declare -a A_ACLlist

#
# Source common features
#
source ${SCRIPT_BASE_DIR}/lib/constants
source ${SCRIPT_BASE_DIR}/lib/helpers

#
# FUNCTIONS
#


#
# Function to print the usage
#

function usage()
{
  echo "Usage: "
  echo "  $0 -m=|--master=\"<master1 private ip|master1 public ip>,...,<masterN private ip|masterN public ip>\""
  echo "                   -e=|--etcd=\"<etcd1 private ip|etcd1 public ip>,...,<etcdN private ip|etcdN public ip>\""
  echo "                   -n=|--nodes=\"<node1 private ip|node1 public ip>,...,<nodeN private ip|nodeN public ip>\""
  echo "                   -b=|--base_domain=\"<base domain>\""
  echo "                   -d=|--dns_host=\"<DNS host private ip|DHS host public ip>\""
  echo "                   -w=|--wildcard=\"<wildcard DNS private ip|public ip>\""
  echo "                   -p=|--prefix=\"<wildcard prefix, e.g.: 'apps'\""
  echo ""
  echo "  where:"
  echo "    -m|--master      : comma separated list of master instances, private and public IPs separated by '|'"
  echo "    -e|--etcd        : comma separated list of etcd instances, private and public IPs separated by '|'"
  echo "    -n|--nodes       : comma separated list of node instances, private and public IPs separated by '|'"
  echo "    -b|--base_domain : base DNS domain for use with the master(s) and nodes"
  echo "    -d|--dns_host    : server to use for hosting DNS (bind), private and public IPs separated by '|'"
  echo "    -w|--wildcard    : server to use for wildcard DNS entry, private and public IPs separated by '|'"
  echo "    -p|--prefix      : prefix to use for wildcard DNS entry"
}


#
# Function to install the DNS server (bind/named)
#
# Parameters:
# $1 - IP address for DNS server
#

function installDNSserver()
{
  dns_host=${1}

  echo "DNS : Installing DNS server (bind/named)..."

  ${SSH_CMD} root@${dns_host} 'yum -y install bind bind-utils'

  [ $? -ne 0 ] && echo "Failed to install DNS server on ${dns_host}" && exit 1
}


#
# Function to prepare DNS server
#
# Parameters:
# $1 - IP address for DNS server
# $2 - base DNS domain name
#

function prepDNSserver()
{
  dns_host=${1}
  dns_domain=${2}

  echo "DNS : Preparing DNS server ..."

  ${SSH_CMD} root@${dns_host} "rm -rf ${VAR_NAMED_STATIC_DIR}/*"

  ${SCP_CMD} -r ${SCRIPT_BASE_DIR}/templates/bind/* root@${dns_host}:/
  [ $? -ne 0 ] && echo "Failed to copy template DNS files to host ${dns_host}" && exit 1

  ${SSH_CMD} root@${dns_host} "
  sed -i \"s/OSE_DNS_DOMAIN/${dns_domain}/g\" /etc/named.conf

  mv -f ${VAR_NAMED_STATIC_DIR}/private-OSE_DNS_DOMAIN.db ${VAR_NAMED_STATIC_DIR}/private-${dns_domain}.db
  sed -i \"s/OSE_DNS_DOMAIN/${dns_domain}/g\" ${VAR_NAMED_STATIC_DIR}/private-${dns_domain}.db

  mv -f ${VAR_NAMED_STATIC_DIR}/public-OSE_DNS_DOMAIN.db ${VAR_NAMED_STATIC_DIR}/public-${dns_domain}.db
  sed -i \"s/OSE_DNS_DOMAIN/${dns_domain}/g\" ${VAR_NAMED_STATIC_DIR}/public-${dns_domain}.db
"

  [ $? -ne 0 ] && echo "Failed to prep DNS server on ${dns_host}" && exit 1
}


#
# Function to set the IPtables rules to allow for DNS traffic
#
# Parameters:
# $1 - IP address for DNS server 
#

function setIPtables()
{
  dns_host=${1}

  echo "DNS : Setting firewall (iptables) ... "

  udp='\-A INPUT \-p udp \-m state \-\-state NEW \-m udp \-\-dport 53 \-j ACCEPT'
  tcp='\-A INPUT \-p tcp \-m state \-\-state NEW \-m tcp \-\-dport 53 \-j ACCEPT'

  ${SSH_CMD} root@${dns_host} "
  yum -y install iptables-services

  [ \$(grep -c '"$udp"' /etc/sysconfig/iptables) == 0 ] && \
  sed -i \"/-A INPUT -j REJECT/i $udp\" /etc/sysconfig/iptables

  [ \$(grep -c '"$tcp"' /etc/sysconfig/iptables) == 0 ] && \
  sed -i \"/-A INPUT -j REJECT/i $tcp\" /etc/sysconfig/iptables

  # Stop and disable firewalld if it's currently running and/or enabled
  systemctl status firewalld &>/dev/null
  [ \$? -eq 0 ] && systemctl stop firewalld
  [ -n \"\`systemctl status firewalld | grep '.service; enabled'\`\" ] && \
  systemctl disable firewalld

  sleep 1
  systemctl restart iptables
"

  [ $? -ne 0 ] && echo "Failed to set iptables on ${dns_host}" && exit 1
}


#
# Function to update the /etc/resolv.conf file with the "correct"
# nameserver(s) and search domain
#
# Parameters:
# $1 - IP address for host server 
# $2 - DNS search domain
# $3 - nameserver(s)
#

function setDNSservers()
{
  host=${1}
  search_domain=${2}
  nameserver=${3} 

  echo "DNS : Updating resolv.conf for ${host} ..."

  ${SSH_CMD} root@${host} "
  sed -i 's/^PEERDNS=.*/PEERDNS=\"no\"/' /etc/sysconfig/network-scripts/ifcfg-*
  sed -i 's/^\(nameserver.*\)/# \1/g' /etc/resolv.conf
  sed -i 's/^\(search.*\)/# \1/g' /etc/resolv.conf
  echo \"search ${search_domain}\" >> /etc/resolv.conf
  echo \"nameserver ${nameserver}\" >> /etc/resolv.conf
  echo \"DHCP4_DOMAIN_NAME_SERVERS=${nameserver}\" >> /etc/sysconfig/network
"

  [ $? -ne 0 ] && echo "Failed to configure DNS on ${host}" && exit 1
}


#
# Function to update the hostname
#
# Parameters:
# $1 - IP address for DNS server
# $2 - new hostname for host/instance
#

function setHostname()
{
  dns_host=${1}
  hname=${2}

  echo "DNS : Setting hostname for ${dns_host} ..."

  ${SSH_CMD} root@${dns_host} "
  if [ -e \"/etc/cloud/cloud.cfg\" ]
  then
    sed -i 's/\(.*- set_hostname.*\)/# \1/' /etc/cloud/cloud.cfg
    sed -i 's/\(.*- update_hostname.*\)/# \1/' /etc/cloud/cloud.cfg
  fi

  hostnamectl set-hostname ${hname}
"

  [ $? -ne 0 ] && echo "Failed to set hostname on ${dns_host}" && exit 1
}


#
# "Helper" function to consistently get the in-addr.arpa value
#
# Parameters:
# $1 - IP address to use for return value
#

function getInAddrArpa()
{
  subnet_address=${1}

  subnet=`ipcalc -n ${subnet_address}/16 | sed -ne 's/^NETWORK=\(.*\)/\1/p'`
  in_addr=`echo ${subnet} | awk -F . '{print $2"."$1}'`
  echo "${in_addr}"
}


#
# Function to create a new DNS record
#
# Parameters:
# $1 - IP address for DNS server
# $2 - private ip
# $3 - public ip
# $4 - hostname
# $5 - DNS record type
# $6 - TTL value
#

function createDNSrecord()
{
  dns_host=${1}
  privateip=${2}
  publicip=${3}
  hostname=${4}
  dnstype=${5}
  ttlvalue=${6}

  ttl="3600"
  if [ -n "${ttlvalue}" ]
  then
    ttl="${ttlvalue}"
  fi

  if [ "${dnstype}" = "A" ]
  then
    ${SSH_CMD} root@${dns_host} "
    echo \"${hostname}  ${ttl}  IN   ${dnstype}   ${privateip}\" >> ${VAR_NAMED_STATIC_DIR}/private-*
    echo \"${hostname}  ${ttl}  IN   ${dnstype}   ${publicip}\" >> ${VAR_NAMED_STATIC_DIR}/public-*
  "
  elif [ "${dnstype}" = "PTR" ]
  then
    private_in_addr=`getInAddrArpa ${privateip}`
    public_in_addr=`getInAddrArpa ${publicip}`
    private_ptrrecord=`echo ${privateip} | awk -F . '{print $4"."$3}'`
    public_ptrrecord=`echo ${publicip} | awk -F . '{print $4"."$3}'`

    ${SSH_CMD} root@${dns_host} "
    echo \"${private_ptrrecord}  ${ttl}  IN  ${dnstype}   ${hostname}.\" >> ${VAR_NAMED_STATIC_DIR}/${private_in_addr}.in-addr.arpa.db
    echo \"${public_ptrrecord}  ${ttl}  IN  ${dnstype}   ${hostname}.\" >> ${VAR_NAMED_STATIC_DIR}/${public_in_addr}.in-addr.arpa.db
  "
  fi

  [ $? -ne 0 ] && echo "Failed to create DNS record(${dnstype}) for ${hostname} on ${dns_host}" && exit 1
}



#
# Function to prepare the PTR (reverse DNS) config in
# /etc/named.conf + specific in-addr.arpa files
#
# Parameters:
# $1 - IP address for DNS server
# $2 - IP address for PTR record
# $3 - DNS domain
# #4 - scope (i.e.: "PUBLIC" or "PRIVATE")
#

function prepPTRConfig()
{
  dns_host=${1}
  ptr_record=${2}
  dns_domain=${3}
  scope=${4}

  in_addr=`getInAddrArpa ${ptr_record}`

  in_addr_arpa_zone="zone \\\"${in_addr}.in-addr.arpa\\\" IN \{\n              type master\;\n              file \\\"static\/${in_addr}.in-addr.arpa.db\\\"\;\n        \}\;\n\n        # IN_ADDR_ARPA_ZONE_${scope}"

  ${SSH_CMD} root@${dns_host} "
  [ -e "${VAR_NAMED_STATIC_DIR}/${in_addr}.in-addr.arpa.db" ] && exit 0
  cp -f ${VAR_NAMED_STATIC_DIR}/INV_IP_ADDR.in-addr.arpa.db ${VAR_NAMED_STATIC_DIR}/${in_addr}.in-addr.arpa.db
  sed -i \"s/OSE_DNS_DOMAIN/${dns_domain}/g\" ${VAR_NAMED_STATIC_DIR}/${in_addr}.in-addr.arpa.db
  sed -i \"s/INV_IP_ADDR/${in_addr}/g\" ${VAR_NAMED_STATIC_DIR}/${in_addr}.in-addr.arpa.db
  sed -i \"s/# IN_ADDR_ARPA_ZONE_${scope}/${in_addr_arpa_zone}/g\" /etc/named.conf
"

  [ $? -ne 0 ] && echo "Failed to set PTR configuration on ${dns_host}" && exit 1
}


#
# Function to set the ACL list in the /etc/named.conf file
#
# Parameters:
# $1 - IP address for DNS server
# $2 - ACL list
#

function setACLlist()
{
  dns_host=${1}
  acl_list=${2}

  echo "DNS : Setting ACL list ..."

  ${SSH_CMD} root@${dns_host} "
  sed -i \"s/\t# ACL_PRIVATE_IP_ADDRESSES/${acl_list}/g\" /etc/named.conf
"

  [ $? -ne 0 ] && echo "Failed to set ACL list on ${dns_host}" && exit 1
}


#
# Function to restart DNS server to activate new settings
#
# Parameters:
# $1 - IP address for DNS server
#

function restartDNSserver()
{
  dns_host=${1}

  echo "DNS : Applying DNS server configuration (restart) ..."

  ${SSH_CMD} root@${dns_host} 'systemctl restart named && systemctl enable named'

  [ $? -ne 0 ] && echo "Failed to reload DNS server on ${dns_host}" && exit 1
}


#
# END FUNCTIONS
#


#
# MAIN - main execution starts below
#

for i in "$@"
do
  case $i in
    -m=*|--master=*)
      MASTER="${i#*=}"
      shift
    ;;

    -e=*|--etcd=*)
      ETCD="${i#*=}"
      shift
    ;;

    -n=*|--nodes=*)
      NODES="${i#*=}"
      shift
    ;;

    -b=*|--base_domain=*)
      BASE_DOMAIN="${i#*=}"
      shift
    ;;

    -d=*|--dns_host=*)
      DNS_HOST="${i#*=}"
      shift
    ;;

    -w=*|--wildcard=*)
      WILDCARD_HOST="${i#*=}"
      shift
    ;;

    -p=*|--prefix=*)
      WILDCARD_PREFIX="${i#*=}"
      shift
    ;;

    -h|--help)
      usage
      exit 0
    ;;

    *)
      echo "Invalid Option: ${i#*=}"
      exit 1;
    ;;

  esac
done

if [ -z "${MASTER}" -o \
     -z "${NODES}"  -o \
     -z "${BASE_DOMAIN}" -o \
     -z "${DNS_HOST}" -o \
     -z "${WILDCARD_HOST}" ]
then
  echo "Missing required args"
  usage
  exit 1
fi


IFS=',' read -a masters <<< "${MASTER}"
IFS=',' read -a etcds <<< "${ETCD}"
IFS=',' read -a nodes <<< "${NODES}"

dh_private_ip=${DNS_HOST%|*}
dh_public_ip=${DNS_HOST#*|}
if [ -z "${dh_private_ip}" -o \
     -z "${dh_public_ip}" ]
then
  echo "Invalid DNS host IP combination for ${DNS_HOST}"
  usage
  exit 1
fi

wildcard_private_ip=${WILDCARD_HOST%|*}
wildcard_public_ip=${WILDCARD_HOST#*|}
if [ -z "${wildcard_private_ip}" -o \
     -z "${wildcard_public_ip}" ]
then
  echo "Invalid wildcard IP combination for ${WILDCARD_HOST}"
  usage
  exit 1
fi

[ -z "${WILDCARD_PREFIX}" ] && WILDCARD_PREFIX="${DEFAULT_WILDCARD_PREFIX}.${BASE_DOMAIN}"


installDNSserver ${dh_private_ip}
setIPtables ${dh_private_ip}
prepDNSserver ${dh_private_ip} ${BASE_DOMAIN}
createDNSrecord ${dh_private_ip} ${dh_private_ip} ${dh_public_ip} 'ns1' "A"
createDNSrecord ${dh_private_ip} ${wildcard_private_ip} ${wildcard_public_ip} "*.${WILDCARD_PREFIX}" "A" 300 


i=1
for n in "${nodes[@]}"
do
  privateip=${n%|*}
  publicip=${n#*|}
  if [ -z "${privateip}" -o \
       -z "${publicip}" ]
  then
    echo "Invalid node IP combination for ${n}"
    usage
    exit 1
  fi

  echo "DNS : Setting config for node - ${privateip} ..."

  setHostname ${privateip} node${i}.${BASE_DOMAIN}
  sleep 1
  setDNSservers ${privateip} ${BASE_DOMAIN} ${dh_private_ip}

  prepPTRConfig ${dh_private_ip} ${privateip} ${BASE_DOMAIN} PRIVATE
  prepPTRConfig ${dh_private_ip} ${publicip} ${BASE_DOMAIN} PUBLIC
  createDNSrecord ${dh_private_ip} ${privateip} ${publicip} "node${i}" "A"
  createDNSrecord ${dh_private_ip} ${privateip} ${publicip} "node${i}.${BASE_DOMAIN}" "PTR"

  subnet=`ipcalc -n "${privateip}/${DEFAULT_SUBNET_SIZE}" | sed -ne 's/NETWORK=\(.*\)/\1/p'`
  contains "${subnet}" "${A_ACLlist[@]}" || A_ACLlist+=(${subnet})

  i=$((i+1))
done

i=
[ ${#etcds[@]} -gt 1 ] && i=1

for e in "${etcds[@]}"
do
  privateip=${e%|*}
  publicip=${e#*|}
  if [ -z "${privateip}" -o \
       -z "${publicip}" ]
  then
    echo "Invalid etcd IP combination for ${e}"
    usage
    exit 1
  fi

  echo "DNS : Setting config for etcd - ${privateip}|${publicip} ..."

  prepPTRConfig ${dh_private_ip} ${privateip} ${BASE_DOMAIN} PRIVATE
  prepPTRConfig ${dh_private_ip} ${publicip} ${BASE_DOMAIN} PUBLIC

  createDNSrecord ${dh_private_ip} ${privateip} ${publicip} "etcd${i}" "A"
  createDNSrecord ${dh_private_ip} ${privateip} ${publicip} "etcd${i}.${BASE_DOMAIN}" "PTR"

  setHostname ${privateip} etcd${i}.${BASE_DOMAIN}
  sleep 1
  setDNSservers ${privateip} ${BASE_DOMAIN} ${dh_private_ip}

  subnet=`ipcalc -n "${privateip}/${DEFAULT_SUBNET_SIZE}" | sed -ne 's/NETWORK=\(.*\)/\1/p'`
  contains "${subnet}" "${A_ACLlist[@]}" || A_ACLlist+=(${subnet})

  i=$((i+1))
done

i=
[ ${#masters[@]} -gt 1 ] && i=1

for m in "${masters[@]}"
do
  privateip=${m%|*}
  publicip=${m#*|}
  if [ -z "${privateip}" -o \
       -z "${publicip}" ]
  then
    echo "Invalid master IP combination for ${m}"
    usage
    exit 1
  fi

  echo "DNS : Setting config for master - ${privateip}|${publicip} ..."

  prepPTRConfig ${dh_private_ip} ${privateip} ${BASE_DOMAIN} PRIVATE
  prepPTRConfig ${dh_private_ip} ${publicip} ${BASE_DOMAIN} PUBLIC

  createDNSrecord ${dh_private_ip} ${privateip} ${publicip} "master${i}" "A"
  createDNSrecord ${dh_private_ip} ${privateip} ${publicip} "master${i}.${BASE_DOMAIN}" "PTR"

  setHostname ${privateip} master${i}.${BASE_DOMAIN}
  sleep 1
  setDNSservers ${privateip} ${BASE_DOMAIN} ${dh_private_ip}

  subnet=`ipcalc -n "${privateip}/${DEFAULT_SUBNET_SIZE}" | sed -ne 's/NETWORK=\(.*\)/\1/p'`
  contains "${subnet}" "${A_ACLlist[@]}" || A_ACLlist+=(${subnet})

  i=$((i+1))
done

# Ensure *this* server also has the correct DNS settings
setDNSservers '127.0.0.1' ${BASE_DOMAIN} ${dh_private_ip}

fullacllist=
for a in "${A_ACLlist[@]}"
do
  fullacllist="${fullacllist}\\t${a}\/${DEFAULT_SUBNET_SIZE};\\n"
done

# Finally, set the ACP list
setACLlist ${dh_private_ip} ${fullacllist}

# Make sure all configurations are activated
restartDNSserver ${dh_private_ip}

echo "DNS configuration completed successfully!"
exit 0

