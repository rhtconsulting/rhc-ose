#!/bin/bash

SCRIPT_BASE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source ${SCRIPT_BASE_DIR}/lib/constants

## Functions

usage() {
  echo "Usage: $0 -m=|--master=\"<master hostname>\" -e=|--etcd=\"<etcd1 hostname>,..,<etcdN hostname>\" -n=|--nodes=\"<node1 hostname>,..,<nodeN hostname>\""
}

for i in "$@"
do
case $i in
  -m=*|--master=*)
    MASTER="${i#*=}"
    shift
    ;;
  -e=*|--etcd=*)
    ETCD="${i#*=}"
    shift
    ;;
  -n=*|--nodes=*)
    NODES="${i#*=}"
    shift
    ;;
  *)
    echo "Invalid Option: ${i#*=}"
    exit 1;
    ;;
esac
done

if [ -z "$MASTER" ] || [ -z "$NODES" ]; then
  echo "Missing required args"
  usage
  exit 1
fi

# Create new keypair if it does not exist
if $SSH_CMD root@${MASTER} 'stat ~/.ssh/id_rsa' > /dev/null 2>&1; then
  echo "Found existing Keypair, will use that."
else
  echo -n "No keypair found. Creating one... "
  $SSH_CMD root@${MASTER} 'ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa' > /dev/null 2>&1
  echo "Done"
fi

# Extract public key and ensure *this* host can SSH to itself
public_key=$($SSH_CMD root@${MASTER} 'cat ~/.ssh/id_rsa.pub')
$SSH_CMD root@${MASTER} 'mkdir -p ~/.ssh'
echo "${public_key}" | $SSH_CMD root@${MASTER} 'cat  >> ~/.ssh/authorized_keys'
$SSH_CMD root@${MASTER} 'chmod 700 ~/.ssh; chmod 600 ~/.ssh/*'

for node in ${NODES//,/ } ${ETCD//,/ }; do
  echo -n "Pushing key for node ${node}..."
  $SSH_CMD root@${node} 'mkdir -p ~/.ssh'
  echo "${public_key}" | $SSH_CMD root@${node} 'cat  >> ~/.ssh/authorized_keys'
  $SSH_CMD root@${node} 'chmod 700 ~/.ssh; chmod 600 ~/.ssh/*'
  echo "Done"
done
